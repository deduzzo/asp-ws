<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Docker Apps Management - ASP5 Webservices</title>

    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Bootstrap Icons -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css" rel="stylesheet">
    <!-- Custom CSS -->
    <style>
        :root {
            --primary-color: #2c5aa0;
            --secondary-color: #5a6c7d;
            --success-color: #28a745;
            --danger-color: #dc3545;
            --warning-color: #ffc107;
            --info-color: #17a2b8;
            --dark-color: #343a40;
            --light-color: #f8f9fa;
        }

        body {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        .admin-container {
            background: white;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            margin: 20px;
            padding: 30px;
            min-height: calc(100vh - 40px);
        }

        .page-header {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: white;
            border-radius: 12px;
            padding: 30px;
            margin-bottom: 30px;
        }

        .card {
            border: none;
            border-radius: 12px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.05);
            margin-bottom: 20px;
            transition: transform 0.3s ease;
        }

        .card:hover {
            transform: translateY(-2px);
        }

        .card-header {
            background: var(--light-color);
            border-radius: 12px 12px 0 0 !important;
            padding: 20px;
            border-bottom: 2px solid var(--primary-color);
        }

        .btn {
            border-radius: 8px;
            padding: 10px 20px;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 15px rgba(0,0,0,0.2);
        }

        .status-badge {
            padding: 5px 15px;
            border-radius: 20px;
            font-size: 0.85rem;
            font-weight: 600;
        }

        .status-running {
            background: var(--success-color);
            color: white;
        }

        .status-stopped {
            background: var(--secondary-color);
            color: white;
        }

        .status-error {
            background: var(--danger-color);
            color: white;
        }

        .app-card {
            cursor: pointer;
        }

        .modal-header {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: white;
        }

        .log-viewer {
            background: #1e1e1e;
            color: #d4d4d4;
            font-family: 'Courier New', monospace;
            padding: 15px;
            border-radius: 8px;
            max-height: 400px;
            overflow-y: auto;
            white-space: pre-wrap;
            word-wrap: break-word;
        }
    </style>
</head>
<body>
    <div class="admin-container">
        <div class="page-header">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1><i class="bi bi-boxes"></i> Gestione Applicazioni Docker</h1>
                    <p class="mb-0">Gestisci e distribuisci applicazioni containerizzate</p>
                </div>
                <div>
                    <button class="btn btn-warning me-2" data-bs-toggle="modal" data-bs-target="#dockerSettingsModal">
                        <i class="bi bi-gear"></i> Impostazioni Docker
                    </button>
                    <button class="btn btn-light me-2" onclick="logout()">
                        <i class="bi bi-box-arrow-right"></i> Esci
                    </button>
                    <a href="/admin" class="btn btn-light">
                        <i class="bi bi-arrow-left"></i> Torna all'Admin
                    </a>
                </div>
            </div>
        </div>

        <!-- Action Buttons -->
        <div class="row mb-4">
            <div class="col-md-12">
                <button class="btn btn-primary me-2" data-bs-toggle="modal" data-bs-target="#cloneModal">
                    <i class="bi bi-github"></i> Clona da GitHub
                </button>
                <button class="btn btn-secondary me-2" data-bs-toggle="modal" data-bs-target="#uploadModal">
                    <i class="bi bi-upload"></i> Carica ZIP
                </button>
                <button class="btn btn-info" onclick="loadApps()">
                    <i class="bi bi-arrow-clockwise"></i> Aggiorna
                </button>
            </div>
        </div>

        <!-- Apps List -->
        <div id="appsList" class="row">
            <!-- Apps will be loaded here dynamically -->
        </div>
    </div>

    <!-- Clone from GitHub Modal -->
    <div class="modal fade" id="cloneModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"><i class="bi bi-github"></i> Clona da GitHub</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="cloneForm">
                        <div class="mb-3">
                            <label class="form-label">URL Repository GitHub *</label>
                            <input type="url" class="form-control" name="githubUrl" required
                                   placeholder="https://github.com/username/repository">
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Branch</label>
                            <input type="text" class="form-control" name="branch" value="main"
                                   placeholder="main">
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Nome Applicazione (Opzionale)</label>
                            <input type="text" class="form-control" name="name"
                                   placeholder="Sarà letto da package.json">
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Descrizione (Opzionale)</label>
                            <textarea class="form-control" name="description" rows="3"></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annulla</button>
                    <button type="button" class="btn btn-primary" onclick="cloneApp()">Clona e Distribuisci</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Upload ZIP Modal -->
    <div class="modal fade" id="uploadModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"><i class="bi bi-upload"></i> Carica ZIP</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="uploadForm" enctype="multipart/form-data">
                        <div class="mb-3">
                            <label class="form-label">File ZIP *</label>
                            <input type="file" class="form-control" name="zipFile" accept=".zip" required>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Nome Applicazione (Opzionale)</label>
                            <input type="text" class="form-control" name="name"
                                   placeholder="Sarà letto da package.json">
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Descrizione (Opzionale)</label>
                            <textarea class="form-control" name="description" rows="3"></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annulla</button>
                    <button type="button" class="btn btn-primary" onclick="uploadApp()">Carica e Distribuisci</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Docker Settings Modal -->
    <div class="modal fade" id="dockerSettingsModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"><i class="bi bi-gear"></i> Impostazioni Docker</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <p class="text-muted mb-3">Configura le modalità di accesso a Docker. Se Docker richiede permessi root, abilita l'uso di sudo e inserisci la password.</p>
                    <form id="dockerSettingsForm">
                        <div class="mb-3">
                            <label class="form-label">Modalità di esecuzione</label>
                            <select class="form-select" name="useSudo" id="useSudoSelect" onchange="toggleSudoPassword()">
                                <option value="false">Normale (senza sudo)</option>
                                <option value="true">Con sudo (richiede password root)</option>
                            </select>
                            <small class="text-muted">Seleziona "Con sudo" se ricevi errori di permessi Docker</small>
                        </div>
                        <div class="mb-3" id="sudoPasswordGroup" style="display: none;">
                            <label class="form-label">Password Root/Sudo *</label>
                            <input type="password" class="form-control" name="sudoPassword" id="sudoPasswordInput" autocomplete="off">
                            <small class="text-muted">La password verrà salvata in modo sicuro per le operazioni Docker</small>
                        </div>
                        <div id="dockerSettingsError" class="alert alert-danger d-none"></div>
                        <div id="dockerSettingsSuccess" class="alert alert-success d-none"></div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annulla</button>
                    <button type="button" class="btn btn-primary" onclick="saveDockerSettings()">
                        <i class="bi bi-save"></i> Salva Impostazioni
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Login Modal -->
    <div class="modal fade" id="loginModal" tabindex="-1" data-bs-backdrop="static" data-bs-keyboard="false">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"><i class="bi bi-shield-lock"></i> Autenticazione Richiesta</h5>
                </div>
                <div class="modal-body">
                    <p class="text-muted mb-3">Per accedere alla gestione delle applicazioni Docker è necessario autenticarsi con un token valido.</p>
                    <form id="loginForm">
                        <div class="mb-3">
                            <label class="form-label">Username *</label>
                            <input type="text" class="form-control" name="username" required autocomplete="username">
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Password *</label>
                            <input type="password" class="form-control" name="password" required autocomplete="current-password">
                        </div>
                        <div id="loginError" class="alert alert-danger d-none"></div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" onclick="performLogin()">
                        <i class="bi bi-box-arrow-in-right"></i> Login
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- App Details Modal -->
    <div class="modal fade" id="appDetailsModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"><i class="bi bi-info-circle"></i> Dettagli Applicazione</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body" id="appDetailsContent">
                    <!-- Details will be loaded here -->
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <!-- Axios for API calls -->
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

    <script>
        let currentApps = [];
        let loginModal = null;
        const TOKEN_KEY = 'apps_auth_token';
        const DOCKER_SETTINGS_KEY = 'docker_settings';

        // Check authentication on page load
        document.addEventListener('DOMContentLoaded', function() {
            loginModal = new bootstrap.Modal(document.getElementById('loginModal'));
            loadDockerSettings();
            checkAuthentication();
        });

        // Configure axios to include token in all requests
        axios.interceptors.request.use(function (config) {
            const token = localStorage.getItem(TOKEN_KEY);
            if (token) {
                config.headers['Authorization'] = `Bearer ${token}`;
            }
            return config;
        }, function (error) {
            return Promise.reject(error);
        });

        // Handle 401 responses
        axios.interceptors.response.use(function (response) {
            return response;
        }, function (error) {
            if (error.response && error.response.status === 401) {
                // Token is invalid or expired, show login modal
                localStorage.removeItem(TOKEN_KEY);
                showLoginModal();
            }
            return Promise.reject(error);
        });

        function checkAuthentication() {
            const token = localStorage.getItem(TOKEN_KEY);
            if (!token) {
                showLoginModal();
            } else {
                loadApps();
            }
        }

        function showLoginModal() {
            loginModal.show();
        }

        async function performLogin() {
            const form = document.getElementById('loginForm');
            const formData = new FormData(form);
            const username = formData.get('username');
            const password = formData.get('password');
            const errorDiv = document.getElementById('loginError');

            if (!username || !password) {
                errorDiv.textContent = 'Username e password sono richiesti';
                errorDiv.classList.remove('d-none');
                return;
            }

            try {
                errorDiv.classList.add('d-none');

                // Call login API with specific scope and domain
                const response = await axios.post('/api/v1/login/get-token', {
                    login: username,
                    password: password,
                    scopi: 'apps',
                    ambito: 'api'
                });

                if (response.data.ok && response.data.data.token) {
                    // Store token in localStorage
                    localStorage.setItem(TOKEN_KEY, response.data.data.token);

                    // Hide login modal
                    loginModal.hide();
                    form.reset();

                    // Load apps
                    loadApps();
                } else {
                    errorDiv.textContent = 'Login fallito: ' + (response.data.err?.msg || 'Errore sconosciuto');
                    errorDiv.classList.remove('d-none');
                }
            } catch (err) {
                console.error('Login error:', err);
                let errorMsg = 'Errore durante il login';
                if (err.response?.data?.err?.msg) {
                    errorMsg = err.response.data.err.msg;
                } else if (err.message) {
                    errorMsg = err.message;
                }
                errorDiv.textContent = errorMsg;
                errorDiv.classList.remove('d-none');
            }
        }

        // Allow form submission with Enter key
        document.addEventListener('DOMContentLoaded', function() {
            document.getElementById('loginForm').addEventListener('submit', function(e) {
                e.preventDefault();
                performLogin();
            });
        });

        function logout() {
            if (confirm('Sei sicuro di voler effettuare il logout?')) {
                localStorage.removeItem(TOKEN_KEY);
                document.getElementById('appsList').innerHTML = '';
                showLoginModal();
            }
        }

        function loadDockerSettings() {
            const settings = localStorage.getItem(DOCKER_SETTINGS_KEY);
            if (settings) {
                try {
                    const parsed = JSON.parse(settings);
                    document.getElementById('useSudoSelect').value = parsed.useSudo ? 'true' : 'false';
                    if (parsed.useSudo && parsed.sudoPassword) {
                        document.getElementById('sudoPasswordInput').value = parsed.sudoPassword;
                        document.getElementById('sudoPasswordGroup').style.display = 'block';
                    }
                } catch (err) {
                    console.error('Error loading Docker settings:', err);
                }
            }
        }

        function toggleSudoPassword() {
            const useSudo = document.getElementById('useSudoSelect').value === 'true';
            const passwordGroup = document.getElementById('sudoPasswordGroup');
            passwordGroup.style.display = useSudo ? 'block' : 'none';
            if (!useSudo) {
                document.getElementById('sudoPasswordInput').value = '';
            }
        }

        async function saveDockerSettings() {
            const useSudo = document.getElementById('useSudoSelect').value === 'true';
            const sudoPassword = document.getElementById('sudoPasswordInput').value;
            const errorDiv = document.getElementById('dockerSettingsError');
            const successDiv = document.getElementById('dockerSettingsSuccess');

            errorDiv.classList.add('d-none');
            successDiv.classList.add('d-none');

            if (useSudo && !sudoPassword) {
                errorDiv.textContent = 'La password root/sudo è richiesta quando si usa sudo';
                errorDiv.classList.remove('d-none');
                return;
            }

            try {
                const settings = {
                    useSudo: useSudo,
                    sudoPassword: useSudo ? sudoPassword : null
                };

                // Save to backend
                const response = await axios.post('/api/v1/admin/apps/docker-settings', settings);

                if (response.data.ok) {
                    // Save to localStorage
                    localStorage.setItem(DOCKER_SETTINGS_KEY, JSON.stringify(settings));

                    successDiv.textContent = 'Impostazioni Docker salvate con successo';
                    successDiv.classList.remove('d-none');

                    setTimeout(() => {
                        bootstrap.Modal.getInstance(document.getElementById('dockerSettingsModal')).hide();
                    }, 1500);
                } else {
                    errorDiv.textContent = 'Errore nel salvare le impostazioni: ' + response.data.err.msg;
                    errorDiv.classList.remove('d-none');
                }
            } catch (err) {
                console.error('Error saving Docker settings:', err);
                let errorMsg = 'Errore nel salvare le impostazioni';
                if (err.response?.data?.err?.msg) {
                    errorMsg = err.response.data.err.msg;
                } else if (err.message) {
                    errorMsg = err.message;
                }
                errorDiv.textContent = errorMsg;
                errorDiv.classList.remove('d-none');
            }
        }

        async function loadApps() {
            try {
                const response = await axios.get('/api/v1/admin/apps/list');
                if (response.data.ok) {
                    currentApps = response.data.data.apps;
                    renderApps(currentApps);
                } else {
                    showError('Errore nel caricamento delle app: ' + response.data.err.msg);
                }
            } catch (err) {
                showError('Errore nel caricamento delle app: ' + err.message);
            }
        }

        function renderApps(apps) {
            const appsList = document.getElementById('appsList');

            if (apps.length === 0) {
                appsList.innerHTML = `
                    <div class="col-12">
                        <div class="alert alert-info">
                            <i class="bi bi-info-circle"></i> Nessuna applicazione distribuita.
                            Clona da GitHub o carica un file ZIP per iniziare.
                        </div>
                    </div>
                `;
                return;
            }

            appsList.innerHTML = apps.map(app => `
                <div class="col-md-6 col-lg-4">
                    <div class="card app-card" onclick="showAppDetails('${app.id}')">
                        <div class="card-header">
                            <h5 class="mb-0">${app.name}</h5>
                        </div>
                        <div class="card-body">
                            <p class="text-muted">${app.description || 'Nessuna descrizione'}</p>
                            <div class="mb-2">
                                <small class="text-muted">
                                    <i class="bi bi-tag"></i> ${app.id}
                                </small>
                            </div>
                            <div class="mb-2">
                                <span class="badge bg-info">${app.type}</span>
                                <span class="badge bg-secondary">${app.source}</span>
                            </div>
                            <div class="mb-3">
                                <span class="status-badge status-${app.status}">
                                    ${app.status === 'running' ? 'IN ESECUZIONE' : app.status === 'stopped' ? 'FERMATA' : 'ERRORE'}
                                </span>
                            </div>
                            ${app.port ? `<p class="mb-2"><small><i class="bi bi-link-45deg"></i> <a href="/apps/${app.id}" target="_blank">Apri App</a></small></p>` : ''}
                            <div class="btn-group w-100" role="group" onclick="event.stopPropagation()">
                                ${app.status === 'running' ? `
                                    <button class="btn btn-sm btn-warning" onclick="stopApp('${app.id}')">
                                        <i class="bi bi-stop-circle"></i> Ferma
                                    </button>
                                    <button class="btn btn-sm btn-info" onclick="restartApp('${app.id}')">
                                        <i class="bi bi-arrow-clockwise"></i> Riavvia
                                    </button>
                                ` : `
                                    <button class="btn btn-sm btn-success" onclick="startApp('${app.id}')">
                                        <i class="bi bi-play-circle"></i> Avvia
                                    </button>
                                `}
                                ${app.source === 'github' ? `
                                    <button class="btn btn-sm btn-primary" onclick="updateApp('${app.id}')">
                                        <i class="bi bi-arrow-down-circle"></i> Aggiorna
                                    </button>
                                ` : ''}
                                <button class="btn btn-sm btn-danger" onclick="deleteApp('${app.id}')">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            `).join('');
        }

        async function cloneApp() {
            const form = document.getElementById('cloneForm');
            const formData = new FormData(form);
            const data = Object.fromEntries(formData.entries());

            if (!data.githubUrl) {
                showError('L\'URL GitHub è richiesto');
                return;
            }

            try {
                showLoading('Clonazione da GitHub in corso...');
                const response = await axios.post('/api/v1/admin/apps/clone', data);

                if (response.data.ok) {
                    bootstrap.Modal.getInstance(document.getElementById('cloneModal')).hide();
                    form.reset();
                    showSuccess('App clonata con successo!');
                    loadApps();
                } else {
                    showError('Errore nella clonazione dell\'app: ' + response.data.err.msg);
                }
            } catch (err) {
                showError('Errore nella clonazione dell\'app: ' + err.message);
            }
        }

        async function uploadApp() {
            const form = document.getElementById('uploadForm');
            const formData = new FormData(form);

            if (!formData.get('zipFile') || formData.get('zipFile').size === 0) {
                showError('Il file ZIP è richiesto');
                return;
            }

            try {
                showLoading('Caricamento file ZIP in corso...');
                const response = await axios.post('/api/v1/admin/apps/upload', formData, {
                    headers: {
                        'Content-Type': 'multipart/form-data'
                    }
                });

                if (response.data.ok) {
                    bootstrap.Modal.getInstance(document.getElementById('uploadModal')).hide();
                    form.reset();
                    showSuccess('App caricata con successo!');
                    loadApps();
                } else {
                    showError('Errore nel caricamento dell\'app: ' + response.data.err.msg);
                }
            } catch (err) {
                showError('Errore nel caricamento dell\'app: ' + err.message);
            }
        }

        async function startApp(appId) {
            if (!confirm('Avviare questa applicazione?')) return;

            try {
                showLoading('Avvio applicazione in corso...');
                const response = await axios.post('/api/v1/admin/apps/start', { id: appId });

                if (response.data.ok) {
                    showSuccess('Applicazione avviata con successo!');
                    loadApps();
                } else {
                    showError('Errore nell\'avvio dell\'applicazione: ' + response.data.err.msg);
                }
            } catch (err) {
                showError('Errore nell\'avvio dell\'applicazione: ' + err.message);
            }
        }

        async function stopApp(appId) {
            if (!confirm('Fermare questa applicazione?')) return;

            try {
                showLoading('Arresto applicazione in corso...');
                const response = await axios.post('/api/v1/admin/apps/stop', { id: appId });

                if (response.data.ok) {
                    showSuccess('Applicazione fermata con successo!');
                    loadApps();
                } else {
                    showError('Errore nell\'arresto dell\'applicazione: ' + response.data.err.msg);
                }
            } catch (err) {
                showError('Errore nell\'arresto dell\'applicazione: ' + err.message);
            }
        }

        async function restartApp(appId) {
            if (!confirm('Riavviare questa applicazione?')) return;

            try {
                showLoading('Riavvio applicazione in corso...');
                const response = await axios.post('/api/v1/admin/apps/restart', { id: appId });

                if (response.data.ok) {
                    showSuccess('Applicazione riavviata con successo!');
                    loadApps();
                } else {
                    showError('Errore nel riavvio dell\'applicazione: ' + response.data.err.msg);
                }
            } catch (err) {
                showError('Errore nel riavvio dell\'applicazione: ' + err.message);
            }
        }

        async function updateApp(appId) {
            if (!confirm('Scaricare gli ultimi aggiornamenti da GitHub?')) return;

            try {
                showLoading('Aggiornamento applicazione in corso...');
                const response = await axios.post('/api/v1/admin/apps/update', { id: appId });

                if (response.data.ok) {
                    showSuccess('Applicazione aggiornata con successo!');
                    loadApps();
                } else {
                    showError('Errore nell\'aggiornamento dell\'applicazione: ' + response.data.err.msg);
                }
            } catch (err) {
                showError('Errore nell\'aggiornamento dell\'applicazione: ' + err.message);
            }
        }

        async function deleteApp(appId) {
            if (!confirm('Eliminare questa applicazione? Questa azione non può essere annullata.')) return;

            try {
                showLoading('Eliminazione applicazione in corso...');
                const response = await axios.post('/api/v1/admin/apps/delete', { id: appId });

                if (response.data.ok) {
                    showSuccess('Applicazione eliminata con successo!');
                    loadApps();
                } else {
                    showError('Errore nell\'eliminazione dell\'applicazione: ' + response.data.err.msg);
                }
            } catch (err) {
                showError('Errore nell\'eliminazione dell\'applicazione: ' + err.message);
            }
        }

        async function showAppDetails(appId) {
            try {
                const response = await axios.get('/api/v1/admin/apps/get', { params: { id: appId } });

                if (response.data.ok) {
                    const app = response.data.data.app;
                    const logsResponse = app.containerId ?
                        await axios.get('/api/v1/admin/apps/logs', { params: { id: appId, tail: 50 } }) : null;

                    const logs = logsResponse?.data?.ok ? logsResponse.data.data.logs : 'Nessun log disponibile';

                    const statusLabel = app.status === 'running' ? 'IN ESECUZIONE' : app.status === 'stopped' ? 'FERMATA' : 'ERRORE';

                    document.getElementById('appDetailsContent').innerHTML = `
                        <div class="row">
                            <div class="col-md-6">
                                <h6>Informazioni di Base</h6>
                                <p><strong>ID:</strong> ${app.id}</p>
                                <p><strong>Nome:</strong> ${app.name}</p>
                                <p><strong>Tipo:</strong> ${app.type}</p>
                                <p><strong>Sorgente:</strong> ${app.source}</p>
                                ${app.githubUrl ? `<p><strong>GitHub:</strong> <a href="${app.githubUrl}" target="_blank">${app.githubUrl}</a></p>` : ''}
                                ${app.branch ? `<p><strong>Branch:</strong> ${app.branch}</p>` : ''}
                            </div>
                            <div class="col-md-6">
                                <h6>Informazioni Container</h6>
                                <p><strong>Stato:</strong> <span class="status-badge status-${app.status}">${statusLabel}</span></p>
                                ${app.port ? `<p><strong>Porta:</strong> ${app.port}</p>` : ''}
                                ${app.containerId ? `<p><strong>Container ID:</strong> <small>${app.containerId.substring(0, 12)}</small></p>` : ''}
                                <p><strong>Immagine Docker:</strong> ${app.dockerImage}</p>
                            </div>
                        </div>
                        ${app.containerId ? `
                            <div class="mt-4">
                                <h6>Log del Container (ultime 50 righe)</h6>
                                <div class="log-viewer">${logs}</div>
                            </div>
                        ` : ''}
                    `;

                    new bootstrap.Modal(document.getElementById('appDetailsModal')).show();
                } else {
                    showError('Errore nel caricamento dei dettagli dell\'applicazione: ' + response.data.err.msg);
                }
            } catch (err) {
                showError('Errore nel caricamento dei dettagli dell\'applicazione: ' + err.message);
            }
        }

        function showLoading(message) {
            // Simple loading indicator (you can enhance this)
            console.log(message);
        }

        function showSuccess(message) {
            alert(message);
        }

        function showError(message) {
            alert(message);
        }
    </script>
</body>
</html>
