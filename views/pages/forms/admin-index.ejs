<!DOCTYPE html>
<html lang="it">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Forms Admin - ASP Messina</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
  <style>
    body { font-family: 'Roboto', sans-serif; }
    /* Loading indicator */
    .alpine-loading { display: none; }
    body:not(.alpine-ready) .alpine-loading {
      display: flex;
      position: fixed;
      inset: 0;
      background: #f3f4f6;
      z-index: 9999;
      align-items: center;
      justify-content: center;
    }
  </style>
</head>
<body class="bg-gray-100 min-h-screen">

  <!-- Loading indicator shown until Alpine.js is ready -->
  <div class="alpine-loading">
    <div class="text-center">
      <div class="inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
      <p class="text-gray-600 mt-4">Caricamento...</p>
    </div>
  </div>

  <div x-data="adminApp()" x-init="init()" class="min-h-screen">

    <!-- Login Screen -->
    <div x-show="!isAuthenticated" class="flex items-center justify-center min-h-screen bg-gradient-to-br from-blue-500 to-purple-600">
      <div class="bg-white rounded-lg shadow-xl p-8 w-full max-w-md">
        <h1 class="text-2xl font-bold text-gray-800 mb-6 text-center">Forms Admin - Login</h1>

        <form @submit.prevent="login()">
          <div class="mb-4">
            <label class="block text-sm font-medium text-gray-700 mb-2">Username</label>
            <input
              type="text"
              x-model="credentials.username"
              class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500"
              required
            />
          </div>

          <div class="mb-4">
            <label class="block text-sm font-medium text-gray-700 mb-2">Password</label>
            <input
              type="password"
              x-model="credentials.password"
              class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500"
              required
            />
          </div>

          <div class="mb-6">
            <label class="flex items-center">
              <input
                type="checkbox"
                x-model="credentials.useDomain"
                class="rounded border-gray-300 text-blue-600 focus:ring-blue-500 mr-2"
              />
              <span class="text-sm text-gray-700">Login tramite dominio ASP</span>
            </label>
          </div>

          <div x-show="loginError" class="mb-4 p-3 bg-red-50 border border-red-200 rounded-md text-red-700 text-sm" x-text="loginError"></div>

          <button
            type="submit"
            :disabled="loggingIn"
            class="w-full bg-blue-500 text-white py-2 px-4 rounded-md hover:bg-blue-600 disabled:opacity-50 font-medium"
          >
            <span x-show="!loggingIn">Accedi</span>
            <span x-show="loggingIn">Accesso in corso...</span>
          </button>
        </form>
      </div>
    </div>

    <!-- Admin Dashboard -->
    <div x-show="isAuthenticated" class="min-h-screen">

      <!-- Header -->
      <header class="bg-white shadow-sm">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4 flex justify-between items-center">
          <h1 class="text-2xl font-bold text-gray-900">Gestione Forms</h1>
          <div class="flex items-center gap-4">
            <span class="text-sm text-gray-600" x-text="'Utente: ' + (userData.username || 'N/A')"></span>
            <button
              @click="showImportDialog = true"
              class="px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600 text-sm flex items-center gap-2"
            >
              <span class="material-icons text-sm">upload_file</span>
              Importa Form
            </button>
            <button
              @click="logout()"
              class="px-4 py-2 bg-red-500 text-white rounded-md hover:bg-red-600 text-sm"
            >
              Logout
            </button>
          </div>
        </div>
      </header>

      <!-- Main Content -->
      <main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">

        <div x-show="loading" class="text-center py-12">
          <div class="inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
          <p class="text-gray-600 mt-4">Caricamento...</p>
        </div>

        <div x-show="!loading && forms.length === 0" class="bg-white rounded-lg shadow-md p-8 text-center">
          <span class="material-icons text-gray-400 text-6xl">description</span>
          <p class="text-gray-600 mt-4">Nessun form disponibile</p>
        </div>

        <!-- Forms Grid -->
        <div x-show="!loading && forms.length > 0" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          <template x-for="form in forms" :key="form.id">
            <div class="bg-white rounded-lg shadow-md hover:shadow-lg transition-shadow p-6">
              <div class="flex items-start justify-between mb-4">
                <div class="flex-1">
                  <h3 class="text-lg font-semibold text-gray-900 mb-2" x-text="form.title"></h3>
                  <p class="text-sm text-gray-600 line-clamp-2" x-text="form.description"></p>
                </div>
                <span class="material-icons text-blue-500">description</span>
              </div>

              <div class="space-y-2 mb-4">
                <div class="flex items-center text-sm text-gray-600">
                  <span class="material-icons text-sm mr-2">layers</span>
                  <span x-text="form.pages + ' pagine'"></span>
                </div>
                <div class="flex items-center text-sm">
                  <span class="material-icons text-sm mr-2">inbox</span>
                  <span class="font-semibold" :class="form.submissionsCount > 0 ? 'text-green-600' : 'text-gray-600'" x-text="form.submissionsCount + ' submissions'"></span>
                </div>
                <div class="flex items-center text-sm text-gray-600" x-show="form.recaptchaEnabled">
                  <span class="material-icons text-sm mr-2">shield</span>
                  <span>reCAPTCHA attivo</span>
                </div>
              </div>

              <div class="flex gap-2 mb-2">
                <a
                  :href="'/admin/forms/' + form.id"
                  class="flex-1 bg-blue-500 text-white text-center py-2 px-4 rounded-md hover:bg-blue-600 text-sm font-medium"
                >
                  Vedi Submissions
                </a>
                <a
                  :href="'/forms/' + form.id"
                  target="_blank"
                  class="px-4 py-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300"
                  title="Visualizza form"
                >
                  <span class="material-icons text-sm">open_in_new</span>
                </a>
              </div>
              <button
                @click="exportFormSchema(form.id)"
                class="w-full bg-green-500 text-white py-2 px-4 rounded-md hover:bg-green-600 text-sm font-medium flex items-center justify-center gap-2 mb-2"
              >
                <span class="material-icons text-sm">download</span>
                Esporta Schema JSON
              </button>
              <button
                @click="confirmDeleteForm(form)"
                class="w-full bg-red-500 text-white py-2 px-4 rounded-md hover:bg-red-600 text-sm font-medium flex items-center justify-center gap-2"
              >
                <span class="material-icons text-sm">delete</span>
                Elimina Form
              </button>
            </div>
          </template>
        </div>

      </main>

      <!-- Delete Confirmation Dialog -->
      <div
        x-show="showDeleteDialog"
        x-cloak
        class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50"
        @click.self="showDeleteDialog = false"
      >
        <div class="bg-white rounded-lg shadow-xl p-6 w-full max-w-md">
          <div class="flex items-start gap-4 mb-4">
            <span class="material-icons text-red-500 text-4xl">warning</span>
            <div class="flex-1">
              <h2 class="text-xl font-bold text-gray-900 mb-2">Conferma Eliminazione</h2>
              <p class="text-sm text-gray-600">
                Sei sicuro di voler eliminare il form <strong x-text="formToDelete?.title"></strong>?
              </p>
              <p class="text-sm text-red-600 mt-2">
                Questa azione eliminerà il template JSON e il database con tutte le submissions.
                <strong>Non è reversibile!</strong>
              </p>
            </div>
          </div>

          <div x-show="deleteError" class="mb-4 p-3 bg-red-50 border border-red-200 rounded-md text-red-700 text-sm" x-text="deleteError"></div>

          <div class="flex gap-3">
            <button
              @click="showDeleteDialog = false"
              :disabled="deleting"
              class="flex-1 px-4 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 disabled:opacity-50"
            >
              Annulla
            </button>
            <button
              @click="deleteForm()"
              :disabled="deleting"
              class="flex-1 px-4 py-2 bg-red-500 text-white rounded-md hover:bg-red-600 disabled:opacity-50"
            >
              <span x-show="!deleting">Elimina</span>
              <span x-show="deleting">Eliminazione...</span>
            </button>
          </div>
        </div>
      </div>

      <!-- Import Dialog -->
      <div
        x-show="showImportDialog"
        x-cloak
        class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50"
        @click.self="showImportDialog = false"
      >
        <div class="bg-white rounded-lg shadow-xl p-6 w-full max-w-md">
          <div class="flex justify-between items-center mb-4">
            <h2 class="text-xl font-bold text-gray-900">Importa Form JSON</h2>
            <button @click="showImportDialog = false" class="text-gray-400 hover:text-gray-600">
              <span class="material-icons">close</span>
            </button>
          </div>

          <div class="mb-4">
            <p class="text-sm text-gray-600 mb-4">
              Seleziona un file JSON con la definizione del form. Se il form esiste già, verrà aggiornato.
            </p>

            <div class="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
              <input
                type="file"
                id="formFileInput"
                accept=".json"
                @change="handleFileSelect($event)"
                class="hidden"
              />
              <label for="formFileInput" class="cursor-pointer">
                <span class="material-icons text-4xl text-gray-400 mb-2">cloud_upload</span>
                <p class="text-sm text-gray-600">Clicca per selezionare un file JSON</p>
                <p class="text-xs text-gray-500 mt-1" x-show="selectedFile" x-text="selectedFile?.name"></p>
              </label>
            </div>
          </div>

          <div x-show="importError" class="mb-4 p-3 bg-red-50 border border-red-200 rounded-md text-red-700 text-sm" x-text="importError"></div>
          <div x-show="importSuccess" class="mb-4 p-3 bg-green-50 border border-green-200 rounded-md text-green-700 text-sm" x-text="importSuccess"></div>

          <div class="flex gap-3">
            <button
              @click="showImportDialog = false"
              class="flex-1 px-4 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50"
            >
              Annulla
            </button>
            <button
              @click="importForm()"
              :disabled="!selectedFile || importing"
              class="flex-1 px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <span x-show="!importing">Importa</span>
              <span x-show="importing">Importazione...</span>
            </button>
          </div>
        </div>
      </div>

    </div>

  </div>

  <script>
    function adminApp() {
      return {
        isAuthenticated: false,
        credentials: {
          username: '',
          password: '',
          useDomain: false
        },
        loginError: null,
        loggingIn: false,
        userData: {},
        forms: <%- JSON.stringify(forms || []) %>,
        loading: false,
        showImportDialog: false,
        selectedFile: null,
        importing: false,
        importError: null,
        importSuccess: null,
        showDeleteDialog: false,
        formToDelete: null,
        deleting: false,
        deleteError: null,

        init() {
          // Check if already authenticated
          const token = localStorage.getItem('forms_admin_token');
          if (token) {
            this.isAuthenticated = true;
            this.loadUserData();
          }
        },

        async login() {
          this.loggingIn = true;
          this.loginError = null;

          try {
            // Prepara i parametri per la richiesta
            const requestBody = {
              login: this.credentials.username,
              password: this.credentials.password,
              scopi: 'forms',
              ambito: 'login'
            };

            // Aggiungi il parametro domain se selezionato
            if (this.credentials.useDomain) {
              requestBody.domain = 'asp.messina.it';
            }

            const response = await fetch('/api/v1/login/get-token', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(requestBody)
            });

            const data = await response.json();

            if (data.ok && data.data && data.data.token) {
              // Verifica che l'utente abbia lo scopo "forms"
              const tokenData = JSON.parse(atob(data.data.token.split('.')[1]));

              if (!tokenData.scopi || !tokenData.scopi.includes('forms')) {
                this.loginError = 'Utente non autorizzato ad accedere alla gestione forms';
                return;
              }

              // Salva il token
              localStorage.setItem('forms_admin_token', data.data.token);
              this.userData = tokenData;
              this.isAuthenticated = true;

            } else {
              this.loginError = data.err?.msg || 'Credenziali non valide';
            }

          } catch (err) {
            console.error('Login error:', err);
            this.loginError = 'Errore di connessione al server';
          } finally {
            this.loggingIn = false;
          }
        },

        loadUserData() {
          const token = localStorage.getItem('forms_admin_token');
          if (token) {
            try {
              this.userData = JSON.parse(atob(token.split('.')[1]));
            } catch (err) {
              console.error('Error decoding token:', err);
            }
          }
        },

        logout() {
          localStorage.removeItem('forms_admin_token');
          this.isAuthenticated = false;
          this.credentials = { username: '', password: '' };
          this.userData = {};
        },

        handleFileSelect(event) {
          this.selectedFile = event.target.files[0];
          this.importError = null;
          this.importSuccess = null;
        },

        async importForm() {
          if (!this.selectedFile) {
            this.importError = 'Seleziona un file JSON';
            return;
          }

          this.importing = true;
          this.importError = null;
          this.importSuccess = null;

          try {
            const formData = new FormData();
            formData.append('formFile', this.selectedFile);

            const token = localStorage.getItem('forms_admin_token');

            const response = await fetch('/api/v1/forms/import', {
              method: 'POST',
              headers: {
                'Authorization': 'Bearer ' + token
              },
              body: formData
            });

            const data = await response.json();

            if (data.ok && data.data) {
              this.importSuccess = data.data.message || 'Form importato con successo';

              // Ricarica la pagina dopo 2 secondi per mostrare il nuovo form
              setTimeout(() => {
                window.location.reload();
              }, 2000);
            } else {
              this.importError = data.err?.msg || 'Errore durante l\'importazione';
            }

          } catch (err) {
            console.error('Import error:', err);
            this.importError = 'Errore di connessione al server';
          } finally {
            this.importing = false;
          }
        },

        async exportFormSchema(formId) {
          try {
            // Fetch form definition
            const response = await fetch(`/api/v1/forms/${formId}`);
            const data = await response.json();

            if (data.ok && data.data) {
              const formSchema = data.data;

              // Create JSON string with pretty formatting
              const jsonString = JSON.stringify(formSchema, null, 2);

              // Create blob and download
              const blob = new Blob([jsonString], { type: 'application/json' });
              const url = URL.createObjectURL(blob);
              const a = document.createElement('a');
              a.href = url;
              a.download = `${formId}.json`;
              document.body.appendChild(a);
              a.click();
              document.body.removeChild(a);
              URL.revokeObjectURL(url);
            } else {
              alert('Errore durante l\'esportazione dello schema');
            }
          } catch (err) {
            console.error('Export error:', err);
            alert('Errore durante l\'esportazione dello schema');
          }
        },

        confirmDeleteForm(form) {
          this.formToDelete = form;
          this.showDeleteDialog = true;
          this.deleteError = null;
        },

        async deleteForm() {
          if (!this.formToDelete) return;

          this.deleting = true;
          this.deleteError = null;

          try {
            const token = localStorage.getItem('forms_admin_token');

            const response = await fetch(`/api/v1/forms/${this.formToDelete.id}`, {
              method: 'DELETE',
              headers: {
                'Authorization': 'Bearer ' + token
              }
            });

            const data = await response.json();

            if (data.ok && data.data) {
              // Rimuovi il form dalla lista locale
              this.forms = this.forms.filter(f => f.id !== this.formToDelete.id);

              // Chiudi il dialog
              this.showDeleteDialog = false;
              this.formToDelete = null;

              // Mostra notifica di successo (opzionale)
              alert('Form eliminato con successo');
            } else {
              this.deleteError = data.err?.msg || 'Errore durante l\'eliminazione';
            }

          } catch (err) {
            console.error('Delete error:', err);
            this.deleteError = 'Errore di connessione al server';
          } finally {
            this.deleting = false;
          }
        }
      };
    }
  </script>

  <!-- Load Alpine.js and mark body as ready when initialized -->
  <script src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>
  <script>
    // Mark Alpine.js as ready
    document.addEventListener('alpine:init', () => {
      console.log('Alpine.js initialized successfully');
      document.body.classList.add('alpine-ready');
    });

    // Fallback: mark as ready after a delay if Alpine doesn't initialize
    setTimeout(() => {
      if (!document.body.classList.contains('alpine-ready')) {
        console.warn('Alpine.js did not initialize, marking as ready anyway');
        document.body.classList.add('alpine-ready');
      }
    }, 2000);
  </script>

</body>
</html>
